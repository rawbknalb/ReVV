{
  "_args": [
    [
      {
        "raw": "highcharts-export-server",
        "scope": null,
        "escapedName": "highcharts-export-server",
        "name": "highcharts-export-server",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Rob/Development/React/ReVV/server"
    ]
  ],
  "_from": "highcharts-export-server@latest",
  "_id": "highcharts-export-server@1.0.14",
  "_inCache": true,
  "_location": "/highcharts-export-server",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/highcharts-export-server-1.0.14.tgz_1494499183230_0.6758503236342221"
  },
  "_npmUser": {
    "name": "highsoft",
    "email": "torstein@highsoft.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "highcharts-export-server",
    "scope": null,
    "escapedName": "highcharts-export-server",
    "name": "highcharts-export-server",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/highcharts-export-server/-/highcharts-export-server-1.0.14.tgz",
  "_shasum": "62c6baa322b302cd96bfbe8bca9f216aaab6da61",
  "_shrinkwrap": null,
  "_spec": "highcharts-export-server",
  "_where": "/Users/Rob/Development/React/ReVV/server",
  "author": {
    "name": "Highsoft AS",
    "email": "support@highcharts.com",
    "url": "http://www.highcharts.com/about"
  },
  "bin": {
    "highcharts-export-server": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/highcharts/node-export-server/issues"
  },
  "dependencies": {
    "async": "*",
    "body-parser": "*",
    "colors": "*",
    "cors": "*",
    "express": "*",
    "express-form-data": "*",
    "express-rate-limit": "*",
    "mkdirp": "*",
    "phantomjs-prebuilt": "2.1.13",
    "prompt": "*",
    "request": "*",
    "uuid": ">=3.0.1"
  },
  "description": "Convert Highcharts.JS charts to static image files.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "62c6baa322b302cd96bfbe8bca9f216aaab6da61",
    "tarball": "https://registry.npmjs.org/highcharts-export-server/-/highcharts-export-server-1.0.14.tgz"
  },
  "engines": {
    "node": ">=5.10.0"
  },
  "gitHead": "b99e67d585bf190fe762e9743f100cc554eb90ef",
  "homepage": "https://github.com/highcharts/node-export-server#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "highsoft",
      "email": "torstein@highsoft.com"
    }
  ],
  "name": "highcharts-export-server",
  "optionalDependencies": {},
  "readme": "# Highcharts Node.js Export Server\n\nConvert Highcharts.JS charts to static image files.\n\n## What & Why\n\nThis is a node.js application/service that converts [Highcharts.JS](http://highcharts.com) charts to static image files. \nIt supports PNG, JPEG, SVG, and PDF output; and the input can be either SVG, or JSON-formatted chart options.\n\nThe application can be used either as a CLI (Command Line Interface), as an HTTP server, or as a node.js module.\n\n### Use Cases\n\nThe main use case for the export server is situations where headless conversion of charts are required.\nCommon use cases include automatic report generation, static caching, and for including charts in e.g.\npresentations, or other documents.\n\nIn addition, the HTTP mode can be used to run your own export server for your users,\nrather than relying on the public export.highcharts.com server which is rate limited.\n\nThe HTTP server can either be ran stand-alone and integrate with your other applications and services,\nor it can be ran in such a way that the export buttons on your charts route to your own server.\n\nTo do latter, add:\n    \n    {\n      exporting: {\n        url: \"<IP to the self-hosted export server>\"\n      }\n    }\n\nto the chart options when creating your charts.\n\nFor systems that generate automatic reports, using the export server as a node.js module\nis a great fit - especially if your report generator is also written in node.\nSee [here](https://github.com/highcharts/node-export-server#using-as-a-nodejs-module) for examples.\n\n## Install\n\nFirst, make sure you have node.js installed. Go to [nodejs.org](https://nodejs.org/en/download/) and download/install node for your platform. \n\nAfter node.js is installed, install the export server by opening a terminal and typing:\n    \n    npm install highcharts-export-server -g\n\nOR:\n    \n    git clone https://github.com/highcharts/node-export-server\n    npm install\n    npm link\n\n\nNote: depending on how you installed Node, you may have to create a symlink from `nodejs` to `node`. Example on Linux:\n\n```\nln -s `which nodejs` /usr/bin/node\n```\n\n## Running\n    \n    highcharts-export-server <arguments>\n\n## Command Line Arguments\n\n**General options**\n\n  * `--infile`: Specify the input file.\n  * `--instr`: Specify the input as a string.\n  * `--options`: Alias for `--instr`\n  * `--outfile`: Specify the output filename.\n  * `--allowFileResources`: Allow injecting resources from the filesystem. Has no effect when running as a server. Defaults to `true`.\n  * `--type`: The type of the exported file. Valid options are `jpg png pdf svg`.\n  * `--scale`: The scale of the chart.\n  * `--width`: Scale the chart to fit the width supplied - overrides `--scale`.\n  * `--constr`: The constructor to use. Either `Chart` or `StockChart`.\n  * `--callback`: File containing JavaScript to call in the constructor of Highcharts.\n  * `--resources`: Stringified JSON.\n  * `--batch \"input.json=output.png;input2.json=output2.png;..\"`: Batch convert  \n  * `--logDest <path>`: Set path for log files, and enable file logging\n  * `--logFile <filename>`: Set the name of the log file (without the path). Defaults to `highcharts-export-server.log`. Note that `--logDest` also needs to be set to enable file logging.\n  * `--logLevel <0..4>`: Set the log level. 0 = off, 1 = errors, 2 = warn, 3 = notice, 4 = verbose\n  * `--fromFile \"options.json\"`: Read CLI options from JSON file\n  * `--tmpdir`: The path to temporary output files.\n  * `--workers`: Number of workers to spawn\n  * `--workLimit`: the pieces of work that can be performed before restarting a phantom process\n  * `--listenToProcessExits`: set to 0 to skip attaching process.exit handlers. Note that disabling this may cause zombie processes!\n  * `--globalOptions`: A JSON string with options to be passed to Highcharts.setOptions\n\n**Server related options**\n\n  * `--enableServer <1|0>`: Enable the server (done also when supplying --host)\n  * `--host`: The hostname to run the server on.\n  * `--port`: The port to listen for incoming requests on.\n  * `--sslPath`: The path to the SSL key/certificate. Indirectly enables SSL support.\n  * `--sslPort`: Port on which to run the HTTPS server\n  * `--sslOnly`: Set to true to only serve over HTTPS\n  * `--rateLimit`: Argument is the max requests allowed in one minute. Disabled by default.\n\n*`-` and `--` can be used interchangeably when using the CLI.*\n\n## Setup: Injecting the Highcharts dependency\n\nIn order to use the export server, Highcharts.js needs to be injected\ninto the export template.\n\nThis is largely an automatic process. When running `npm install` you will\nbe prompted to accept the license terms of Highcharts.js. Answering `yes` will\npull the version of your choosing from the Highcharts CDN and put them where they need to be.\n\nHowever, if you need to do this manually you can run `node build.js`.\n\n### Using In Automated Deployments\n\nIf you're deploying an application/service that depend on the export server \nas a node module, you can set the environment variable `ACCEPT_HIGHCHARTS_LICENSE` to `YES`\non your server, and it will automatically agree to the licensing terms when running\n`npm install`. You can also use `HIGHCHARTS_VERSION` and `HIGHCHARTS_USE_STYLED`\nto bake with a specific Highcharts version, and to enable styled mode (requires\na Highcharts 5 license).\n\n## Note About Resources and the CLI\n\nIf `--resources` is not set, and a file `resources.json` exist in the folder\nfrom which the cli tool was ran, it will use the `resources.json` file.\n\n## HTTP Server\n\nThe server accepts the following arguments:\n\n  * `infile`: A string containing JSON or SVG for the chart \n  * `options`: Alias for `infile`\n  * `svg`: A string containing SVG to render\n  * `type`: The format: `png`, `jpeg`, `pdf`, `svg`. Mimetypes can also be used.\n  * `scale`: The scale factor\n  * `width`: The chart width (overrides scale)\n  * `callback`: Javascript to execute in the highcharts constructor.\n  * `resources`: Additional resources.\n  * `constr`: The constructor to use. Either `Chart` or `Stock`.\n  * `b64`: Bool, set to true to get base64 back instead of binary.\n  * `async`: Get a download link instead of the file data\n  * `noDownload`: Bool, set to true to not send attachment headers on the response.\n  * `asyncRendering`: Wait for the included scripts to call `highexp.done()` before rendering the chart.\n  * `globalOptions`: A JSON object with options to be passed to `Highcharts.setOptions`.\n  * `dataOptions`: Passed to `Highcharts.data(..)`\n  * `customCode`: When `dataOptions` is supplied, this is a function to be called with the after applying the data options. Its only argument is the complete options object which will be passed to the Highcharts constructor on return.\n\nNote that the `b64` option overrides the `async` option.\n\nIt responds to `application/json`, `multipart/form-data`, and URL encoded requests.\n\nCORS is enabled for the server.\n\nIt's recommended to run the server using [forever](https://github.com/foreverjs/forever) unless running in a managed environment such as AWS Elastic Beanstalk.\n\n### Running in Forever\n\nThe easiest way to run in forever is to clone the node export server repo, and run `forever start ./bin/cli.js --enableServer 1 --killSignal SIGINT` in the project folder.\n\nRemember to install forever first: `sudo npm install -g forever`.\n\nPlease see the forever documentation for additional options (such as log destination).\n\n### SSL\n\nTo enable ssl support, add `--sslPath <path to key/crt>` when running the server.\nNote that the certificate files needs to be named as such:\n  * `server.crt`\n  * `server.key`\n\n### Worker Count & Work Limit\n\nThe export server utilizes a pool of *workers*, where one worker is a \nPhantomJS process responsible for converting charts. The pool size \ncan be set with the `--workers` switch, and should be tweaked to fit the hardware\non which you're running the server. It's recommended that you start with the default (8),\nand work your way up (or down if 8 is too many for your setup, and things are unstable) gradually. The `tests/http/stress-test.js` script can be used\nto test the server. It fires batches of 10 requests every 10ms, and expects the\nserver to be running on port 8081.\n\nPhantomJS becomes somewhat unstable the more export requests it has historically handled.\nTo work around this, each of the workers has a maximum number of requests it can\nhandle before it restarts itself. This number is 60 by default, and can be tweaked with\n`--workLimit`. As with `--workers`, this number should also be tweaked to fit your \nuse case.\n\n### System Requirements\n\nThe system requirements largely depend on your use case.\n\nIt's largely CPU and memory bound, so when using in heavy-traffic situations,\nit needs a fairly beefy server. It's recommended that the server has at least 1GB\nof memory regardless of traffic, and more than one core.\n\n### Installing Fonts\n\nDoes your Linux server not have Arial or Calibri? PhantomJS uses the system installed fonts to render pages. Therefore the Highcharts Export Server requires fonts to be properly installed on the system in order to use them to render charts.\n\nNote that the default font-family config in Highcharts is `\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif\"`.\n\nFonts are installed differently depending on your system. Please follow the below guides for font installation on most common systems.\n\n#### OS X\nInstall your desired fonts with the Font Book app, or place it in /Library/Fonts/ (system) or ~/Library/Fonts/ (user)\n\n#### Linux\nCopy or move the TTF file to the `/usr/share/fonts/truetype` (may require sudo privileges):\n```\nmkdir -p /usr/share/fonts/truetype\ncp yourFont.ttf /usr/share/fonts/truetype/\nfc-cache -fv\n```\n\n#### Windows\nCopy or move the TTF file to `C:\\Windows\\Fonts\\`:\n```\ncopy yourFont.ttf C:\\Windows\\Fonts\\yourFont.ttf\n```\n\n## Server Test\n\nRun the below in a terminal after running `highcharts-export-server --enableServer 1`.\n    \n    # Generate a chart and save it to mychart.png    \n    curl -H \"Content-Type: application/json\" -X POST -d '{\"infile\":{\"title\": {\"text\": \"Steep Chart\"}, \"xAxis\": {\"categories\": [\"Jan\", \"Feb\", \"Mar\"]}, \"series\": [{\"data\": [29.9, 71.5, 106.4]}]}}' 127.0.0.1:7801 -o mychart.png\n\n## Using as a Node.js Module\n\nThe export server can also be used as a node module to simplify integrations:\n    \n    //Include the exporter module\n    const exporter = require('highcharts-export-server');\n\n    //Export settings \n    var exportSettings = {\n        type: 'png',\n        options: {\n            title: {\n                text: 'My Chart'\n            },\n            xAxis: {\n                categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mar\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n            },\n            series: [\n                {\n                    type: 'line',\n                    data: [1, 3, 2, 4]\n                },\n                {\n                    type: 'line',\n                    data: [5, 3, 4, 2]\n                }\n            ]\n        }\n    };\n\n    //Set up a pool of PhantomJS workers\n    exporter.initPool();\n\n    //Perform an export\n    /*\n        Export settings corresponds to the available CLI arguments described\n        above.\n    */\n    exporter.export(exportSettings, function (err, res) {\n        //The export result is now in res.\n        //If the output is not PDF or SVG, it will be base64 encoded (res.data).\n        //If the output is a PDF or SVG, it will contain a filename (res.filename).\n\n        //Kill the pool when we're done with it, and exit the application\n        exporter.killPool();\n        process.exit(1);\n    });\n\n\n### Node.js API Reference\n\n**highcharts-export-server module**\n\n**Functions**\n\n  * `log(level, ...)`: log something. Level is a number from 1-4. Args are joined by whitespace to form the message.\n  * `logLevel(level)`: set the current log level: `0`: disabled, `1`: errors, `2`: warnings, `3`: notices, `4`: verbose\n  * `enableFileLogging(path, name)`: enable logging to file. `path` is the path to log to, `name` is the filename to log to\n  * `export(exportOptions, fn)`: do an export. `exportOptions` uses the same attribute names as the CLI switch names. `fn` is called when the export is completed, with an object as the second argument containing the the filename attribute.\n  * `startServer(port, sslPort, sslPath)`: start an http server on the given port. `sslPath` is the path to the server key/certificate (must be named server.key/server.crt)\n  * `server` - the server instance \n    * `enableRateLimiting(options)` - enable rate limiting on the POST path\n      * `max` - the maximum amount of requests before rate limiting kicks in\n      * `window` - the time window in minutes for rate limiting. Example: setting `window` to `1` and `max` to `30` will allow a maximum of 30 requests within one minute.\n      * `delay` - the amount to delay each successive request before hitting the max\n      * `trustProxy` - set this to true if behind a load balancer\n      * `skipKey`/`skipToken` - key/token pair that allows bypassing the rate limiter. On requests, these should be sent as such: `?key=<key>&access_token=<token>`.\n    * `app()` - returns the express app\n    * `express()` - return the express module instance\n    * `useFilter(when, fn)` - attach a filter to the POST route. Returning false in the callback will terminate the request.\n      * `when` - either `beforeRequest` or `afterRequest`\n      * `fn` - the function to call \n        * `req` - the request object\n        * `res` - the result object\n        * `data` - the request data\n        * `id` - the request ID\n        * `uniqueid` - the unique id for the request (used for temporary file names)        \n  * `initPool(config)`: init the phantom pool - must be done prior to exporting. `config` is an object as such:\n    * `maxWorkers` (default 25) - max count of worker processes\n    * `initialWorkers` (default 5) - initial worker process count\n    * `workLimit` (default 50) - how many task can be performed by a worker process before it's automatically restarted\n  * `killPool()`: kill the phantom processes\n\n## Using Ajax in Injected Resources\n\nIf you need to perform Ajax requests inside one of the resource scripts,\nset `asyncRendering` to true, and call `highexp.done()` in the Ajax return to process the chart.\n\nExample:\n    \n    {\n      asyncRendering: true,\n      resources: {\n        files: 'myAjaxScript.js'    \n      }\n    }\n\nmyAjaxScript.js:\n    \n    jQuery.ajax({\n      url: 'example.com',\n      success: function (data) {\n        ...\n        highexp.done();\n      },\n      error: function () {\n        highexp.done();\n      }\n    });\n\nIf the Ajax call doesn't call `highexp.done()` within 60 seconds, the \nrendering will time out.\n\n## Performance Notice\n\nIn cases of batch exports, it's faster to use the HTTP server than the CLI.\nThis is due to the overhead of starting PhantomJS for each job when using the CLI. \n\nAs a concrete example, running the CLI with [testcharts/basic.json](testcharts/basic.json) \nas the input and converting to PNG averages about 449ms. \nPosting the same configuration to the HTTP server averages less than 100ms.\n\nSo it's better to write a bash script that starts the server and then\nperforms a set of POSTS to it through e.g. curl if not wanting to host the\nexport server as a service.\n\nAlternatively, you can use the `--batch` switch if the output format is the same\nfor each of the input files to process:\n    \n    highcharts-export-server --batch \"infile1.json=outfile1.png;infile2.json=outfile2.png;..\"\n\nOther switches can be combined with this switch.\n\n## License\n\n[MIT](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/highcharts/node-export-server.git",
    "type": "git"
  },
  "scripts": {
    "install": "node ./build.js"
  },
  "version": "1.0.14"
}
